#!/usr/bin/env python3
"""
Attack Bot System Test Suite
Educational/Research Purpose Only

This script tests various components of the attack bot system
to ensure proper functionality.
"""

import sys
import os
import time
import threading
import unittest
import socket
import subprocess
import json
from datetime import datetime

# Add the current directory to the path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class TestAttackBotSystem(unittest.TestCase):
    """Test suite for the attack bot system"""
    
    @classmethod
    def setUpClass(cls):
        """Set up test environment"""
        print("\n[*] Setting up test environment...")
        cls.test_host = "127.0.0.1"
        cls.test_port = 8888
        cls.c2_process = None
    
    @classmethod
    def tearDownClass(cls):
        """Clean up test environment"""
        print("\n[*] Cleaning up test environment...")
        if cls.c2_process:
            cls.c2_process.terminate()
    
    def test_scanner_module(self):
        """Test network scanner functionality"""
        print("\n[*] Testing Scanner Module...")
        try:
            from scanner import NetworkScanner
            scanner = NetworkScanner()
            
            # Test port scanning
            result = scanner.scan_ports("127.0.0.1", [80, 443, 22, 23])
            self.assertIsInstance(result, list)
            print(f"[+] Scanner test passed - Found {len(result)} results")
        except ImportError as e:
            self.fail(f"Scanner module import failed: {e}")
        except Exception as e:
            print(f"[!] Scanner test warning: {e}")
    
    def test_bruteforce_module(self):
        """Test brute force attack module"""
        print("\n[*] Testing Brute Force Module...")
        try:
            from bruteforce import TelnetBruteForcer
            bruteforcer = TelnetBruteForcer()
            
            # Test credential loading
            self.assertGreater(len(bruteforcer.credentials), 0)
            print(f"[+] Brute force test passed - Loaded {len(bruteforcer.credentials)} credentials")
        except ImportError as e:
            self.fail(f"Brute force module import failed: {e}")
        except Exception as e:
            print(f"[!] Brute force test warning: {e}")
    
    def test_c2_communication(self):
        """Test C2 communication module"""
        print("\n[*] Testing C2 Communication Module...")
        try:
            from c2_communication import C2Communication
            c2_comm = C2Communication("127.0.0.1", 8080, "test_bot")
            
            # Test initialization
            self.assertEqual(c2_comm.c2_host, "127.0.0.1")
            self.assertEqual(c2_comm.c2_port, 8080)
            self.assertEqual(c2_comm.bot_id, "test_bot")
            print("[+] C2 communication test passed")
        except ImportError as e:
            self.fail(f"C2 communication module import failed: {e}")
        except Exception as e:
            print(f"[!] C2 communication test warning: {e}")
    
    def test_ddos_manager(self):
        """Test DDoS manager module"""
        print("\n[*] Testing DDoS Manager Module...")
        try:
            from ddos_manager import DDoSManager
            ddos_manager = DDoSManager()
            
            # Test initialization
            self.assertIsNotNone(ddos_manager)
            print("[+] DDoS manager test passed")
        except ImportError as e:
            self.fail(f"DDoS manager module import failed: {e}")
        except Exception as e:
            print(f"[!] DDoS manager test warning: {e}")
    
    def test_session_manager(self):
        """Test session manager module"""
        print("\n[*] Testing Session Manager Module...")
        try:
            from session_manager import SessionManager
            session_manager = SessionManager("test_session")
            
            # Test session creation
            self.assertEqual(session_manager.bot_id, "test_session")
            self.assertIsInstance(session_manager.session_data, dict)
            print("[+] Session manager test passed")
        except ImportError as e:
            self.fail(f"Session manager module import failed: {e}")
        except Exception as e:
            print(f"[!] Session manager test warning: {e}")
    
    def test_device_manager(self):
        """Test device manager module"""
        print("\n[*] Testing Device Manager Module...")
        try:
            from device_manager import DeviceManager, DeviceType
            device_manager = DeviceManager()
            
            # Test initialization
            self.assertIsNotNone(device_manager)
            print("[+] Device manager test passed")
        except ImportError as e:
            self.fail(f"Device manager module import failed: {e}")
        except Exception as e:
            print(f"[!] Device manager test warning: {e}")
    
    def test_exploit_controller(self):
        """Test main exploit controller"""
        print("\n[*] Testing Exploit Controller...")
        try:
            from exploit import ExploitController
            controller = ExploitController("127.0.0.1", 8080)
            
            # Test initialization
            self.assertIsNotNone(controller.bot_id)
            self.assertEqual(controller.c2_host, "127.0.0.1")
            self.assertEqual(controller.c2_port, 8080)
            print(f"[+] Exploit controller test passed - Bot ID: {controller.bot_id}")
        except ImportError as e:
            self.fail(f"Exploit controller import failed: {e}")
        except Exception as e:
            print(f"[!] Exploit controller test warning: {e}")
    
    def test_configuration_loading(self):
        """Test configuration loading"""
        print("\n[*] Testing Configuration Loading...")
        try:
            from launcher import BotLauncher
            launcher = BotLauncher()
            
            # Test config loading
            config = launcher.load_config()
            self.assertIsInstance(config, dict)
            self.assertIn('c2_host', config)
            self.assertIn('c2_port', config)
            print("[+] Configuration loading test passed")
        except ImportError as e:
            self.fail(f"Launcher import failed: {e}")
        except Exception as e:
            print(f"[!] Configuration test warning: {e}")
    
    def test_dependencies(self):
        """Test if all required dependencies are available"""
        print("\n[*] Testing Dependencies...")
        required_modules = [
            'requests', 'psutil', 'socket', 'threading',
            'json', 'hashlib', 'uuid', 'datetime'
        ]
        
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            print(f"[!] Missing modules: {', '.join(missing_modules)}")
        else:
            print("[+] All required dependencies are available")
        
        self.assertEqual(len(missing_modules), 0, f"Missing modules: {missing_modules}")

class TestNetworkOperations(unittest.TestCase):
    """Test network-related operations"""
    
    def test_socket_operations(self):
        """Test basic socket operations"""
        print("\n[*] Testing Socket Operations...")
        try:
            # Test socket creation
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.close()
            print("[+] Socket operations test passed")
        except Exception as e:
            self.fail(f"Socket operations failed: {e}")
    
    def test_host_resolution(self):
        """Test hostname resolution"""
        print("\n[*] Testing Host Resolution...")
        try:
            # Test localhost resolution
            ip = socket.gethostbyname('localhost')
            self.assertEqual(ip, '127.0.0.1')
            print("[+] Host resolution test passed")
        except Exception as e:
            self.fail(f"Host resolution failed: {e}")

class TestSystemIntegration(unittest.TestCase):
    """Test system integration"""
    
    def test_file_operations(self):
        """Test file read/write operations"""
        print("\n[*] Testing File Operations...")
        try:
            test_file = "test_config.json"
            test_data = {"test": "data", "timestamp": datetime.now().isoformat()}
            
            # Write test file
            with open(test_file, 'w') as f:
                json.dump(test_data, f)
            
            # Read test file
            with open(test_file, 'r') as f:
                loaded_data = json.load(f)
            
            self.assertEqual(loaded_data['test'], 'data')
            
            # Clean up
            os.remove(test_file)
            print("[+] File operations test passed")
        except Exception as e:
            self.fail(f"File operations failed: {e}")
    
    def test_threading(self):
        """Test threading operations"""
        print("\n[*] Testing Threading Operations...")
        try:
            result = []
            
            def worker():
                result.append("thread_completed")
            
            thread = threading.Thread(target=worker)
            thread.start()
            thread.join(timeout=5)
            
            self.assertIn("thread_completed", result)
            print("[+] Threading operations test passed")
        except Exception as e:
            self.fail(f"Threading operations failed: {e}")

def run_performance_tests():
    """Run performance tests"""
    print("\n" + "="*60)
    print("PERFORMANCE TESTS")
    print("="*60)
    
    # Test scanner performance
    print("\n[*] Testing Scanner Performance...")
    try:
        from scanner import NetworkScanner
        scanner = NetworkScanner()
        
        start_time = time.time()
        result = scanner.scan_ports("127.0.0.1", [80, 443, 22, 23, 8080])
        end_time = time.time()
        
        scan_time = end_time - start_time
        print(f"[+] Scanner performance: {scan_time:.2f} seconds for 5 ports")
    except Exception as e:
        print(f"[!] Scanner performance test failed: {e}")
    
    # Test memory usage
    print("\n[*] Testing Memory Usage...")
    try:
        import psutil
        process = psutil.Process()
        memory_info = process.memory_info()
        
        print(f"[+] Memory usage: {memory_info.rss / 1024 / 1024:.2f} MB")
    except Exception as e:
        print(f"[!] Memory usage test failed: {e}")

def run_security_tests():
    """Run security-related tests"""
    print("\n" + "="*60)
    print("SECURITY TESTS")
    print("="*60)
    
    # Test evasion detection
    print("\n[*] Testing Evasion Detection...")
    try:
        from exploit import ExploitController
        controller = ExploitController()
        
        # Test analysis environment detection
        is_analysis_env = controller._detect_analysis_environment()
        print(f"[+] Analysis environment detection: {'Detected' if is_analysis_env else 'Not detected'}")
    except Exception as e:
        print(f"[!] Evasion detection test failed: {e}")
    
    # Test bot ID generation
    print("\n[*] Testing Bot ID Generation...")
    try:
        from exploit import ExploitController
        controller1 = ExploitController()
        controller2 = ExploitController()
        
        # Bot IDs should be different
        self.assertNotEqual(controller1.bot_id, controller2.bot_id)
        print(f"[+] Bot ID generation: Unique IDs generated")
    except Exception as e:
        print(f"[!] Bot ID generation test failed: {e}")

def main():
    """Main test runner"""
    print("="*60)
    print("ATTACK BOT SYSTEM TEST SUITE")
    print("Educational/Research Purpose Only")
    print("="*60)
    
    # Run unit tests
    print("\n" + "="*60)
    print("UNIT TESTS")
    print("="*60)
    
    test_loader = unittest.TestLoader()
    test_suite = unittest.TestSuite()
    
    # Add test classes
    test_suite.addTests(test_loader.loadTestsFromTestCase(TestAttackBotSystem))
    test_suite.addTests(test_loader.loadTestsFromTestCase(TestNetworkOperations))
    test_suite.addTests(test_loader.loadTestsFromTestCase(TestSystemIntegration))
    
    # Run tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # Run performance tests
    run_performance_tests()
    
    # Run security tests
    run_security_tests()
    
    # Summary
    print("\n" + "="*60)
    print("TEST SUMMARY")
    print("="*60)
    print(f"Tests run: {result.testsRun}")
    print(f"Failures: {len(result.failures)}")
    print(f"Errors: {len(result.errors)}")
    
    if result.failures:
        print("\nFAILURES:")
        for test, traceback in result.failures:
            print(f"  {test}: {traceback.split('AssertionError: ')[-1].strip()}")
    
    if result.errors:
        print("\nERRORS:")
        for test, traceback in result.errors:
            print(f"  {test}: {traceback.split('Exception: ')[-1].strip()}")
    
    success_rate = ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun) * 100
    print(f"\nSuccess Rate: {success_rate:.1f}%")
    
    if success_rate >= 80:
        print("\n[+] System tests completed successfully!")
        return 0
    else:
        print("\n[!] Some tests failed. Please check the output above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
