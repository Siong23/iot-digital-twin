#!/usr/bin/env python3
"""
Network Scanner Module
Scans for Telnet services on target networks
"""

import socket
import threading
import time
import ipaddress
from typing import List, Dict, Tuple, Optional
from concurrent.futures import ThreadPoolExecutor, as_completed

class TelnetScanner:
    def __init__(self, timeout: int = 3, max_threads: int = 50):
        """
        Initialize Telnet scanner
        
        Args:
            timeout: Connection timeout in seconds
            max_threads: Maximum number of concurrent threads
        """
        self.timeout = timeout
        self.max_threads = max_threads
        self.results = []
        self.results_lock = threading.Lock()
    
    def scan_port(self, ip: str, port: int = 23) -> Dict:
        """
        Scan a single IP and port for Telnet service
        
        Args:
            ip: Target IP address
            port: Target port (default 23 for Telnet)
        
        Returns:
            Dictionary with scan result
        """
        result = {
            'ip': ip,
            'port': port,
            'status': 'closed',
            'service': 'telnet',
            'banner': '',
            'timestamp': time.time()
        }
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            
            # Attempt connection
            connection_result = sock.connect_ex((ip, port))
            
            if connection_result == 0:
                result['status'] = 'open'
                
                # Try to get banner
                try:
                    sock.settimeout(2)  # Short timeout for banner
                    banner = sock.recv(1024).decode('utf-8', errors='ignore').strip()
                    result['banner'] = banner[:200]  # Limit banner length
                except:
                    pass
            
            sock.close()
            
        except socket.timeout:
            result['status'] = 'timeout'
        except Exception as e:
            result['status'] = 'error'
            result['error'] = str(e)
        
        return result
    
    def scan_ip_range(self, ip_range: str, port: int = 23) -> List[Dict]:
        """
        Scan a range of IP addresses for Telnet services
        
        Args:
            ip_range: IP range in CIDR notation (e.g., "192.168.1.0/24")
            port: Target port (default 23)
        
        Returns:
            List of scan results
        """
        try:
            network = ipaddress.ip_network(ip_range, strict=False)
            targets = [(str(ip), port) for ip in network.hosts()]
            
            print(f"[+] Scanning {len(targets)} targets in {ip_range}...")
            
            return self._scan_targets(targets)
            
        except ValueError as e:
            print(f"[-] Invalid IP range format: {e}")
            return []
    
    def scan_ip_list(self, ip_list: List[str], port: int = 23) -> List[Dict]:
        """
        Scan a list of specific IP addresses
        
        Args:
            ip_list: List of IP addresses to scan
            port: Target port (default 23)
        
        Returns:
            List of scan results
        """
        targets = [(ip, port) for ip in ip_list]
        
        print(f"[+] Scanning {len(targets)} specific targets...")
        
        return self._scan_targets(targets)
    
    def scan_port_range(self, ip: str, port_range: Tuple[int, int]) -> List[Dict]:
        """
        Scan a range of ports on a single IP
        
        Args:
            ip: Target IP address
            port_range: Tuple of (start_port, end_port)
        
        Returns:
            List of scan results
        """
        start_port, end_port = port_range
        targets = [(ip, port) for port in range(start_port, end_port + 1)]
        
        print(f"[+] Scanning ports {start_port}-{end_port} on {ip}...")
        
        return self._scan_targets(targets)
    
    def _scan_targets(self, targets: List[Tuple[str, int]]) -> List[Dict]:
        """
        Scan multiple targets using thread pool
        
        Args:
            targets: List of (ip, port) tuples
        
        Returns:
            List of scan results
        """
        results = []
        
        with ThreadPoolExecutor(max_workers=self.max_threads) as executor:
            # Submit all scan tasks
            future_to_target = {
                executor.submit(self.scan_port, ip, port): (ip, port)
                for ip, port in targets
            }
            
            # Collect results as they complete
            for future in as_completed(future_to_target):
                try:
                    result = future.result()
                    results.append(result)
                    
                    # Print live results for open ports
                    if result['status'] == 'open':
                        banner_info = f" - {result['banner']}" if result['banner'] else ""
                        print(f"[+] OPEN: {result['ip']}:{result['port']}{banner_info}")
                    
                except Exception as e:
                    ip, port = future_to_target[future]
                    print(f"[-] Error scanning {ip}:{port} - {e}")
        
        return results
    
    def get_open_ports(self, results: List[Dict]) -> List[Dict]:
        """
        Filter results to only open ports
        
        Args:
            results: List of scan results
        
        Returns:
            List of results with open ports only
        """
        return [result for result in results if result['status'] == 'open']
    
    def save_results(self, results: List[Dict], filename: str = None):
        """
        Save scan results to file
        
        Args:
            results: List of scan results
            filename: Output filename (optional)
        """
        if not filename:
            timestamp = int(time.time())
            filename = f"scan_results_{timestamp}.txt"
        
        try:
            with open(filename, 'w') as f:
                f.write("Telnet Scan Results\n")
                f.write("==================\n\n")
                f.write(f"Scan completed at: {time.ctime()}\n")
                f.write(f"Total targets scanned: {len(results)}\n")
                
                open_ports = self.get_open_ports(results)
                f.write(f"Open ports found: {len(open_ports)}\n\n")
                
                f.write("Open Ports:\n")
                f.write("-----------\n")
                for result in open_ports:
                    f.write(f"{result['ip']}:{result['port']}")
                    if result['banner']:
                        f.write(f" - {result['banner']}")
                    f.write("\n")
                
                f.write("\nDetailed Results:\n")
                f.write("----------------\n")
                for result in results:
                    f.write(f"{result['ip']}:{result['port']} - {result['status']}")
                    if result['banner']:
                        f.write(f" - {result['banner']}")
                    f.write("\n")
            
            print(f"[+] Results saved to {filename}")
            
        except Exception as e:
            print(f"[-] Error saving results: {e}")
    
    def print_summary(self, results: List[Dict]):
        """
        Print scan summary
        
        Args:
            results: List of scan results
        """
        if not results:
            print("[-] No scan results to display")
            return
        
        total_scanned = len(results)
        open_ports = self.get_open_ports(results)
        open_count = len(open_ports)
        
        print(f"\n{'='*50}")
        print(f"           SCAN SUMMARY")
        print(f"{'='*50}")
        print(f"Total Targets Scanned: {total_scanned}")
        print(f"Open Ports Found: {open_count}")
        print(f"Success Rate: {(open_count/total_scanned)*100:.1f}%")
        
        if open_ports:
            print(f"\nOpen Telnet Services:")
            print(f"-" * 30)
            for result in open_ports:
                banner_info = f" ({result['banner'][:50]})" if result['banner'] else ""
                print(f"  {result['ip']}:{result['port']}{banner_info}")
        
        print(f"{'='*50}\n")

# Predefined target lists for common IoT device networks
COMMON_IOT_NETWORKS = [
    "192.168.1.0/24",    # Common home network
    "192.168.0.0/24",    # Alternative home network
    "10.0.0.0/24",       # Common private network
    "172.16.0.0/24",     # Private network range
]

COMMON_TELNET_PORTS = [23, 2323, 23000, 992]  # Common Telnet ports

def quick_scan_common_networks():
    """Perform a quick scan of common IoT networks"""
    scanner = TelnetScanner(timeout=2, max_threads=100)
    all_results = []
    
    print("[+] Starting quick scan of common IoT networks...")
    
    for network in COMMON_IOT_NETWORKS:
        print(f"\n[+] Scanning network: {network}")
        results = scanner.scan_ip_range(network)
        all_results.extend(results)
        
        # Show immediate results
        open_ports = scanner.get_open_ports(results)
        if open_ports:
            print(f"[+] Found {len(open_ports)} open ports in {network}")
        else:
            print(f"[-] No open ports found in {network}")
    
    return all_results

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("Usage:")
        print("  python scanner.py <target>")
        print("  python scanner.py quick")
        print("")
        print("Examples:")
        print("  python scanner.py 192.168.1.0/24")
        print("  python scanner.py 192.168.1.100")
        print("  python scanner.py quick")
        sys.exit(1)
    
    target = sys.argv[1]
    
    if target.lower() == "quick":
        # Quick scan of common networks
        results = quick_scan_common_networks()
    else:
        # Scan specific target
        scanner = TelnetScanner()
        
        if "/" in target:
            # CIDR notation - scan network range
            results = scanner.scan_ip_range(target)
        else:
            # Single IP - scan common Telnet ports
            results = scanner.scan_port_range(target, (23, 23))
    
    # Print summary and save results
    if results:
        scanner = TelnetScanner()
        scanner.print_summary(results)
        scanner.save_results(results)
    else:
        print("[-] No results to display")
