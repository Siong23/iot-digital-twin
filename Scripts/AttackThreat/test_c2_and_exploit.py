#!/usr/bin/env python3
"""
Test script for C2 server and exploit script functionality
"""

import requests
import json
import time
import logging
import datetime
import os

class C2ExploitTester:
    def __init__(self):
        self.cnc_server_ip = "127.0.0.1"
        self.cnc_port = 5000
        self.cnc_url = f"http://{self.cnc_server_ip}:{self.cnc_port}"
        self.log_results = []
        
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('test_script.log')
            ]
        )
    
    def log(self, message, level="INFO"):
        """Log a message with timestamp"""
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_msg = f"[{timestamp}] {message}"
        
        if level == "INFO":
            logging.info(message)
        elif level == "ERROR":
            logging.error(message)
        elif level == "WARNING":
            logging.warning(message)
            
        self.log_results.append(log_msg)
        print(log_msg)
    
    def test_c2_server_connection(self):
        """Test if C2 server is accessible"""
        self.log("Testing connection to C2 server...")
        try:
            response = requests.get(f"{self.cnc_url}/", timeout=5)
            if response.status_code == 200:
                self.log(f"[PASS] C2 server is up and running at {self.cnc_server_ip}")
                return True
            else:
                self.log(f"[FAIL] C2 server returned unexpected status code: {response.status_code}", "ERROR")
                return False
        except Exception as e:
            self.log(f"[FAIL] Failed to connect to C2 server at {self.cnc_server_ip}", "ERROR")
            self.log(f"[FAIL] Error testing C2 server connection: {e}", "ERROR")
            return False
    
    def test_device_registration(self):
        """Test device registration functionality"""
        self.log("Testing device registration...")
        test_devices = [
            ("192.168.1.100", "admin", "admin", "router"),
            ("192.168.1.101", "root", "root", "camera"),
            ("192.168.1.102", "admin", "123456", "dvr"),
            ("192.168.1.103", "user", "password", "iot")
        ]
        
        success_count = 0
        for test_ip, username, password, device_type in test_devices:
            try:
                data = {
                    'ip': test_ip,
                    'username': username,
                    'password': password,
                    'device_type': device_type
                }
                response = requests.post(f"{self.cnc_url}/register", json=data, timeout=10)
                
                if response.status_code == 200:
                    self.log(f"[PASS] Successfully registered {test_ip} as {device_type}")
                    success_count += 1
                else:
                    self.log(f"[FAIL] Failed to register {test_ip}. Status: {response.status_code}", "ERROR")
            except Exception as e:
                self.log(f"[FAIL] Error registering device {test_ip}: {e}", "ERROR")
        
        return success_count == len(test_devices)
    
    def test_scan_result_submission(self):
        """Test scan result submission"""
        self.log("Testing scan result submission...")
        test_results = [
            ("192.168.1.200", 22, "ssh", "open"),
            ("192.168.1.201", 23, "telnet", "open"),
            ("192.168.1.202", 80, "http", "open"),
            ("192.168.1.203", 8080, "http-proxy", "open")
        ]
        
        success_count = 0
        for test_ip, test_port, service, state in test_results:
            try:
                data = {
                    'ip': test_ip,
                    'port': test_port,
                    'service': service,
                    'state': state
                }
                response = requests.post(f"{self.cnc_url}/scan-result", json=data, timeout=10)
                
                if response.status_code == 200:
                    self.log(f"[PASS] Successfully submitted scan result for {test_ip}:{test_port} ({service})")
                    success_count += 1
                else:
                    self.log(f"[FAIL] Failed to submit scan result. Status: {response.status_code}", "ERROR")
            except Exception as e:
                self.log(f"[FAIL] Error submitting scan result: {e}", "ERROR")
        
        return success_count == len(test_results)
    
    def test_attack_history_retrieval(self):
        """Test attack history retrieval"""
        self.log("Testing attack history retrieval...")
        try:
            response = requests.get(f"{self.cnc_url}/get-attack-history", timeout=10)
            if response.status_code == 200:
                attacks = response.json()
                self.log(f"[PASS] Successfully retrieved attack history ({len(attacks)} records)")
                return True
            else:
                self.log(f"[FAIL] Failed to retrieve attack history. Status: {response.status_code}", "ERROR")
                return False
        except Exception as e:
            self.log(f"[FAIL] Error retrieving attack history: {e}", "ERROR")
            return False
    
    def run_all_tests(self):
        """Run all tests"""
        self.log("=" * 60)
        self.log("Starting C2 Server and Exploit Script Tests")
        self.log("=" * 60)
        
        # Test C2 server connection first
        c2_connected = self.test_c2_server_connection()
        if not c2_connected:
            self.log("[FAIL] Cannot continue tests without C2 server connection", "ERROR")
            return False
          # Run other tests
        tests_passed = 0
        total_tests = 3  # Only counting the main functionality tests
        
        if self.test_device_registration():
            tests_passed += 1
        
        if self.test_scan_result_submission():
            tests_passed += 1
            
        if self.test_attack_history_retrieval():
            tests_passed += 1
        
        self.log("=" * 60)
        self.log(f"Tests completed: {tests_passed}/{total_tests} passed")
        self.log("[PASS] All tests completed")
        
        return tests_passed == total_tests
    
    def save_results(self):
        """Save test results to file"""
        try:
            with open('test_results.log', 'w', encoding='utf-8') as f:
                for log in self.log_results:
                    f.write(f"{log}\n")
            self.log("[PASS] Test results saved to test_results.log")
        except Exception as e:
            self.log(f"[FAIL] Error saving test results: {e}", "ERROR")

def main():
    """Main function"""
    test_script = C2ExploitTester()
    test_script.run_all_tests()
    test_script.save_results()

if __name__ == "__main__":
    main()
